{"ast":null,"code":"'use strict';\n\nvar typeOf = require('kind-of');\n/**\n * Basic sort algorithm that has similar behavior to `Array.prototype.sort`\n * for null and undefined, but also allows sorting by an object property.\n *\n * @param {Mixed} `a` First value to compare.\n * @param {Mixed} `b` Second value to compare.\n * @param {String} `prop` Optional property to use when comparing objects. If specified must be a string.\n * @return {Number} Returns 1 when `a` should come after `b`, -1 when `a` should come before `b`, and 0 when `a` and `b` are equal.\n * @api public\n */\n\n\nmodule.exports = function defaultCompare(a, b, prop) {\n  if (prop != null && typeOf(prop) !== 'string') {\n    throw new TypeError('expected \"prop\" to be undefined or a string');\n  }\n\n  var typeA = typeOf(a);\n  var typeB = typeOf(b);\n\n  if (prop) {\n    if (typeA === 'object') {\n      a = a[prop];\n      typeA = typeOf(a);\n    }\n\n    if (typeB === 'object') {\n      b = b[prop];\n      typeB = typeOf(b);\n    }\n  }\n\n  if (typeA === 'null') {\n    return typeB === 'null' ? 0 : typeB === 'undefined' ? -1 : 1;\n  } else if (typeA === 'undefined') {\n    return typeB === 'null' ? 1 : typeB === 'undefined' ? 0 : 1;\n  } else if (typeB === 'null' || typeB === 'undefined') {\n    return -1;\n  } else {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }\n};","map":{"version":3,"sources":["/Users/pawan/Desktop/Marvins-Studio/marvin/node_modules/default-compare/index.js"],"names":["typeOf","require","module","exports","defaultCompare","a","b","prop","TypeError","typeA","typeB"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,IAA9B,EAAoC;AACnD,MAAIA,IAAI,IAAI,IAAR,IAAgBP,MAAM,CAACO,IAAD,CAAN,KAAiB,QAArC,EAA+C;AAC7C,UAAM,IAAIC,SAAJ,CAAc,6CAAd,CAAN;AACD;;AAED,MAAIC,KAAK,GAAGT,MAAM,CAACK,CAAD,CAAlB;AACA,MAAIK,KAAK,GAAGV,MAAM,CAACM,CAAD,CAAlB;;AAEA,MAAIC,IAAJ,EAAU;AACR,QAAIE,KAAK,KAAK,QAAd,EAAwB;AACtBJ,MAAAA,CAAC,GAAGA,CAAC,CAACE,IAAD,CAAL;AACAE,MAAAA,KAAK,GAAGT,MAAM,CAACK,CAAD,CAAd;AACD;;AACD,QAAIK,KAAK,KAAK,QAAd,EAAwB;AACtBJ,MAAAA,CAAC,GAAGA,CAAC,CAACC,IAAD,CAAL;AACAG,MAAAA,KAAK,GAAGV,MAAM,CAACM,CAAD,CAAd;AACD;AACF;;AAED,MAAIG,KAAK,KAAK,MAAd,EAAsB;AACpB,WAAOC,KAAK,KAAK,MAAV,GAAmB,CAAnB,GAAwBA,KAAK,KAAK,WAAV,GAAwB,CAAC,CAAzB,GAA6B,CAA5D;AACD,GAFD,MAEO,IAAID,KAAK,KAAK,WAAd,EAA2B;AAChC,WAAOC,KAAK,KAAK,MAAV,GAAmB,CAAnB,GAAwBA,KAAK,KAAK,WAAV,GAAwB,CAAxB,GAA4B,CAA3D;AACD,GAFM,MAEA,IAAIA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,WAAlC,EAA+C;AACpD,WAAO,CAAC,CAAR;AACD,GAFM,MAEA;AACL,WAAOL,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAcD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAjC;AACD;AACF,CA5BD","sourcesContent":["'use strict';\n\nvar typeOf = require('kind-of');\n\n/**\n * Basic sort algorithm that has similar behavior to `Array.prototype.sort`\n * for null and undefined, but also allows sorting by an object property.\n *\n * @param {Mixed} `a` First value to compare.\n * @param {Mixed} `b` Second value to compare.\n * @param {String} `prop` Optional property to use when comparing objects. If specified must be a string.\n * @return {Number} Returns 1 when `a` should come after `b`, -1 when `a` should come before `b`, and 0 when `a` and `b` are equal.\n * @api public\n */\n\nmodule.exports = function defaultCompare(a, b, prop) {\n  if (prop != null && typeOf(prop) !== 'string') {\n    throw new TypeError('expected \"prop\" to be undefined or a string');\n  }\n\n  var typeA = typeOf(a);\n  var typeB = typeOf(b);\n\n  if (prop) {\n    if (typeA === 'object') {\n      a = a[prop];\n      typeA = typeOf(a);\n    }\n    if (typeB === 'object') {\n      b = b[prop];\n      typeB = typeOf(b);\n    }\n  }\n\n  if (typeA === 'null') {\n    return typeB === 'null' ? 0 : (typeB === 'undefined' ? -1 : 1);\n  } else if (typeA === 'undefined') {\n    return typeB === 'null' ? 1 : (typeB === 'undefined' ? 0 : 1);\n  } else if (typeB === 'null' || typeB === 'undefined') {\n    return -1;\n  } else {\n    return a < b ? -1 : (a > b ? 1 : 0);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
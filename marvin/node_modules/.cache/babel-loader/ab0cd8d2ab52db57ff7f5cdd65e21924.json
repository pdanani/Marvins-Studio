{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pawan/Desktop/Marvins-Studio/marvin/src/components/MainScreen.js\";\nimport React, { Component } from 'react';\nimport PlaylistScreen from './playlist_screen/PlaylistScreen';\nimport AlbumScreen from './album_screen/AlbumScreen';\nimport { Switch, Route, Link } from 'react-router';\nimport Sidebar from './sidebar/Sidebar.js';\nimport PlaylistData from '../PlaylistData.json';\nimport ArtistScreen from './artist_screen/ArtistScreen';\nimport Player from './player/Player.js';\nimport Queue from './queue/Queue.js';\nimport ProfileScreen from './profile_screen/ProfileScreen';\nimport SearchScreen from './search_screen/SearchScreen';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport HomeScreen from './home_screen/HomeScreen';\nimport CommunityScreen from './CommunityScreen';\n\nvar shuffle = require('knuth-shuffle').knuthShuffle;\n\nconst GET_USER = gql`\n    query user($userId: String) {\n        user(id: $userId) {\n            _id\n            email\n            password\n            username\n            userPoints\n            collaborativePlaylistsID\n            followedPlaylistsID\n            ownedPlaylistsID\n            recentlyPlayed \n            mostPlayed {\n                playlistId\n                count\n            }\n            votedPlaylists {\n                playlistID\n                votes\n            }\n            votedSOTD\n        }\n    }\n`;\n\nclass MainScreen extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      songs: [],\n      index: 0,\n      playing: false,\n      shuffle: false,\n      shuffled: [],\n      shuffled_index: 0,\n      showQueue: false\n    };\n\n    this.componentDidMount = () => {\n      fetch('http://localhost:5000/ud').then(res => res.json()).then(res => this.setState({\n        user: res.user\n      })).catch(err => {\n        console.log(err);\n      });\n      console.log(this.state.user);\n    };\n\n    this.handleShowQueue = () => {\n      this.setState({\n        showQueue: true\n      });\n    };\n\n    this.handleCloseQueue = () => {\n      this.setState({\n        showQueue: false\n      });\n    };\n\n    this.goToPlaylist = (playlist, index) => {\n      this.setState({\n        currPlaylist: playlist,\n        playlistIndex: index\n      });\n    };\n\n    this.createShuffleSongs = () => {\n      // NEED TO SHUFFLE ONLY NONQUEUED SONGS!!!\n      let songs = this.state.songs,\n          queued = this.getQueuedSongs();\n\n      if (songs.length === queued.length) {\n        this.setState({\n          shuffle: true,\n          songs: songs,\n          shuffled: songs,\n          shuffled_index: 0\n        });\n      } else {\n        let start_song = songs[this.state.index];\n        songs.splice(start_song, queued.length + 1);\n        let shuffled = shuffle(songs.slice(0));\n        shuffled = queued.concat(shuffled);\n        shuffled.unshift(start_song); // Fix this.state.songs since it was change from songs.splice (shallow copy manipulation)\n\n        songs = queued.concat(songs);\n        songs.splice(this.state.index, 0, start_song);\n        console.log(songs);\n        this.setState({\n          shuffle: true,\n          songs: songs,\n          shuffled: shuffled,\n          shuffled_index: 0\n        });\n      }\n    };\n\n    this.handleToggleShuffle = () => {\n      if (this.state.shuffle == false) {\n        ;\n        this.createShuffleSongs();\n      } else {\n        this.setState({\n          shuffle: false\n        });\n      }\n    };\n\n    this.handleSongChange = song => {\n      console.log(\"changing song to \", song.name); // Get all the queued songs\n\n      let songs = [{\n        song: song,\n        queued: false\n      }],\n          queued = this.getQueuedSongs(); // First add the song to play then all the queued songs\n\n      if (queued !== undefined) songs = songs.concat(queued);\n      this.setState({\n        songs: songs,\n        index: 0\n      }, () => {\n        if (this.state.shuffle == true) {\n          this.createShuffleSongs();\n        }\n      });\n    };\n\n    this.handleQueueSong = song => {\n      let songs = this.state.songs,\n          queue = this.getQueuedSongs();\n      let queueLength = queue.length + 1; // Get the index that the queued song will be in (end of queue)\n\n      songs.splice(this.state.index + queueLength, 0, {\n        song: song,\n        queued: true\n      });\n      this.setState({\n        songs: songs\n      });\n      console.log(\"queueing song\");\n    };\n\n    this.handlePlayPlaylist = songs => {\n      let playlist = [],\n          queued = this.getQueuedSongs();\n\n      for (var x = 0; x < songs.length; x++) {\n        playlist.push({\n          song: songs[x],\n          queued: false\n        });\n        if (x == 0 && queued !== undefined) playlist = playlist.concat(queued);\n      }\n\n      this.setState({\n        songs: playlist\n      });\n    };\n\n    this.handleNextSong = () => {\n      // WHAT IF WE REACHED THE END OF THE SONGS???\n      let shuffle = this.state.shuffle;\n      let index = shuffle ? this.state.shuffled_index : this.state.index;\n      let length = shuffle ? this.state.shuffled.length : this.state.songs.length;\n      let songs = shuffle ? this.state.shuffled : this.state.songs;\n      let song = this.state.shuffle ? this.state.shuffled[index] : this.state.songs[index]; // this.removeQueueSong(index);\n\n      if (!song.queued) // We the song that just played is not a queued song, just incr the index of that song to go to the next song\n        index += 1;\n\n      if (song.queued) {\n        // If the song just played is a queued song, remove it from our songs list\n        if (shuffle) {\n          // If the player is playing the shuffled array, we remove the queued song from the shuffled songs list but need to remove it from the nonshuffled songs list\n          let song_index_songs = this.state.songs.findIndex(s => JSON.stringify(s.song) === JSON.stringify(song.song) && s.queued === song.queued);\n          this.state.songs.splice(song_index_songs, 1);\n        }\n\n        songs.splice(index, 1);\n        length = songs.length; // Update the length of the songs array since a queued song was removed\n      }\n\n      if (index == length) {\n        // If we have reached the end of our songs list, go back to the beginning of the lsit\n        if (this.state.shuffle) // If we are going back to the first song of the shuffled songs list, we must\n          // update what index that song is in the regular songs list so that when \n          // a user clicks unshuffle the order of songs being played continues from an inorder fashion \n          this.nextShuffledIndex(0);else this.setState({\n          index: 0\n        });\n        return 0;\n      } else {\n        // If shuffle is toggled, incr the shuffle_index and set index to curr song index in songs\n        if (this.state.shuffle) this.nextShuffledIndex(index);else this.setState({\n          index: index\n        });\n        return 1;\n      }\n\n      console.log(this.state.shuffled, this.state.songs);\n    };\n\n    this.handlePrevSong = played => {\n      // WHAT IF WE AT THE START OF THE SONGS???\n      console.log(played);\n      let index = this.state.index;\n\n      if (played > 0.03 || index == 0) {\n        this.setState({\n          index: index\n        });\n        return 0;\n      } else {\n        this.setState({\n          index: index - 1\n        });\n        return 1;\n      }\n    };\n  }\n\n  nextShuffledIndex(index) {\n    let song = this.state.shuffled[index];\n    let song_index_songs = this.state.songs.findIndex(s => JSON.stringify(s.song) === JSON.stringify(song.song) && s.queued === song.queued);\n    this.setState({\n      shuffled_index: index,\n      index: song_index_songs\n    });\n  }\n\n  getQueuedSongs() {\n    let songs = this.state.songs,\n        queue;\n    ;\n    console.log(\"queue:\", songs);\n    queue = songs.filter(song => song.queued);\n    return queue;\n  }\n\n  render() {\n    let user,\n        playing = this.state.playing,\n        songs = this.state.songs,\n        index = this.state.index,\n        shuffled = this.state.shuffled,\n        shuffle = this.state.shuffle,\n        shuffled_index = this.state.shuffled_index; // console.log(\"songs is\", songs);\n    // console.log(\"main screen says\", this.state.playing);\n    // console.log(user);\n\n    return /*#__PURE__*/_jsxDEV(Query, {\n      pollInterval: 500,\n      query: GET_USER,\n      variables: {\n        userId: this.state.user\n      },\n      children: ({\n        loading,\n        error,\n        data\n      }) => {\n        if (loading) return 'Loading...';\n        if (error) return `Error! ${error.message}`;else user = data.user;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row flex-nowrap mr-0\",\n            children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n              user: user,\n              history: this.props.history,\n              playlistCallback: this.goToPlaylist\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col overflow-hidden\",\n              style: {\n                paddingBottom: 100\n              },\n              children: /*#__PURE__*/_jsxDEV(Switch, {\n                children: [/*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/app/playlist/:id\",\n                  render: props => /*#__PURE__*/_jsxDEV(PlaylistScreen, { ...props,\n                    user: user,\n                    handlePlaylist: this.handlePlayPlaylist,\n                    handleSongChange: this.handleSongChange,\n                    handleQueueSong: this.handleQueueSong,\n                    handlePlayPlaylist: this.handlePlayPlaylist\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 93\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/app/album\",\n                  children: /*#__PURE__*/_jsxDEV(AlbumScreen, {\n                    user: user,\n                    history: this.props.history,\n                    handlePlaylist: this.handlePlayPlaylist,\n                    handleSongChange: this.handleSongChange,\n                    handleQueueSong: this.handleQueueSong,\n                    handlePlayPlaylist: this.handlePlayPlaylist\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/app/artist\",\n                  children: /*#__PURE__*/_jsxDEV(ArtistScreen, {\n                    user: user,\n                    history: this.props.history\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/app/search\",\n                  children: /*#__PURE__*/_jsxDEV(SearchScreen, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/app/profile/:id\",\n                  render: props => user != null ? /*#__PURE__*/_jsxDEV(ProfileScreen, { ...props,\n                    user: user\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 60\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 102\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/app/home\",\n                  children: /*#__PURE__*/_jsxDEV(HomeScreen, {\n                    handleSongChange: this.handleSongChange,\n                    playing: playing,\n                    user: user\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Route, {\n                  path: \"/app/community\",\n                  children: /*#__PURE__*/_jsxDEV(CommunityScreen, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }, this), this.state.showQueue ? /*#__PURE__*/_jsxDEV(Queue, {\n            songs: songs,\n            index: index,\n            shuffled: shuffled,\n            shuffle: shuffle,\n            shuffled_index: shuffled_index,\n            handleCloseQueue: this.handleCloseQueue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 52\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row fixed-bottom\",\n            children: /*#__PURE__*/_jsxDEV(Player, {\n              songs: songs,\n              playing: playing,\n              index: index,\n              shuffled: shuffled,\n              shuffle: shuffle,\n              shuffled_index: shuffled_index,\n              handleNextSong: this.handleNextSong,\n              handlePrevSong: this.handlePrevSong,\n              handleToggleShuffle: this.handleToggleShuffle,\n              handleShowQueue: this.handleShowQueue,\n              showQueue: this.state.showQueue,\n              handleCloseQueue: this.handleCloseQueue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MainScreen;","map":{"version":3,"sources":["/Users/pawan/Desktop/Marvins-Studio/marvin/src/components/MainScreen.js"],"names":["React","Component","PlaylistScreen","AlbumScreen","Switch","Route","Link","Sidebar","PlaylistData","ArtistScreen","Player","Queue","ProfileScreen","SearchScreen","Query","gql","HomeScreen","CommunityScreen","shuffle","require","knuthShuffle","GET_USER","MainScreen","state","songs","index","playing","shuffled","shuffled_index","showQueue","componentDidMount","fetch","then","res","json","setState","user","catch","err","console","log","handleShowQueue","handleCloseQueue","goToPlaylist","playlist","currPlaylist","playlistIndex","createShuffleSongs","queued","getQueuedSongs","length","start_song","splice","slice","concat","unshift","handleToggleShuffle","handleSongChange","song","name","undefined","handleQueueSong","queue","queueLength","handlePlayPlaylist","x","push","handleNextSong","song_index_songs","findIndex","s","JSON","stringify","nextShuffledIndex","handlePrevSong","played","filter","render","userId","loading","error","data","message","props","history","paddingBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PlaylistScreen from './playlist_screen/PlaylistScreen';\nimport AlbumScreen from './album_screen/AlbumScreen';\nimport { Switch, Route, Link} from 'react-router';\nimport Sidebar from './sidebar/Sidebar.js';\nimport PlaylistData from '../PlaylistData.json'\nimport ArtistScreen from './artist_screen/ArtistScreen';\n\nimport Player from './player/Player.js'\nimport Queue from './queue/Queue.js'\nimport ProfileScreen from './profile_screen/ProfileScreen';\nimport SearchScreen from './search_screen/SearchScreen';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag'\nimport HomeScreen from './home_screen/HomeScreen';\nimport CommunityScreen from './CommunityScreen';\n\nvar shuffle = require('knuth-shuffle').knuthShuffle;\n\n\nconst GET_USER = gql`\n    query user($userId: String) {\n        user(id: $userId) {\n            _id\n            email\n            password\n            username\n            userPoints\n            collaborativePlaylistsID\n            followedPlaylistsID\n            ownedPlaylistsID\n            recentlyPlayed \n            mostPlayed {\n                playlistId\n                count\n            }\n            votedPlaylists {\n                playlistID\n                votes\n            }\n            votedSOTD\n        }\n    }\n`;\n\nclass MainScreen extends Component {\n    state = {\n        songs: [],\n        index: 0,\n        playing: false,\n        shuffle: false,\n        shuffled: [],\n        shuffled_index: 0,\n        showQueue: false\n    }\n\n    componentDidMount = () => {\n        fetch('http://localhost:5000/ud')\n          .then(res => res.json())\n          .then(res => this.setState({user:res.user}))\n          .catch(err => {\n              console.log(err);\n          });  \n        console.log(this.state.user);\n    }\n\n    handleShowQueue = () => {\n        this.setState({ showQueue: true });\n    }\n\n    handleCloseQueue = () => {\n        this.setState({ showQueue: false});\n    }\n\n    goToPlaylist = (playlist, index) => {\n        this.setState({ currPlaylist: playlist, playlistIndex: index })\n    }\n\n    createShuffleSongs = () => { // NEED TO SHUFFLE ONLY NONQUEUED SONGS!!!\n        let songs = this.state.songs, queued = this.getQueuedSongs();\n        if (songs.length === queued.length) {\n            this.setState({shuffle: true, songs: songs, shuffled: songs, shuffled_index: 0});\n        }\n        else {\n            let start_song = songs[this.state.index];\n            songs.splice(start_song,  queued.length + 1);\n            let shuffled = shuffle(songs.slice(0));\n            shuffled = queued.concat(shuffled);\n            shuffled.unshift(start_song);\n            // Fix this.state.songs since it was change from songs.splice (shallow copy manipulation)\n            songs = queued.concat(songs);\n            songs.splice(this.state.index, 0, start_song);\n            console.log(songs);\n            this.setState({shuffle: true, songs: songs, shuffled: shuffled, shuffled_index: 0});\n        }\n    }\n\n    handleToggleShuffle = () => {\n        if (this.state.shuffle == false) {;\n           this.createShuffleSongs();\n        }\n        else {\n            this.setState({shuffle: false});\n        }\n    }\n\n    handleSongChange = (song) => {\n        console.log(\"changing song to \", song.name);\n        // Get all the queued songs\n        let songs = [{song: song, queued: false}], queued = this.getQueuedSongs();\n        // First add the song to play then all the queued songs\n        if (queued !== undefined)\n            songs = songs.concat(queued);\n        this.setState({songs: songs, index: 0}, () => {\n            if (this.state.shuffle == true) {\n                this.createShuffleSongs();\n            }\n        });\n    }\n    \n    handleQueueSong = (song) => {\n        let songs = this.state.songs, queue = this.getQueuedSongs();\n        let queueLength = queue.length + 1; // Get the index that the queued song will be in (end of queue)\n        songs.splice(this.state.index + queueLength, 0, {song: song, queued: true});\n        this.setState({songs: songs});\n        console.log(\"queueing song\");\n    }\n\n    handlePlayPlaylist = (songs) => {\n        let playlist = [], queued = this.getQueuedSongs();\n        for (var x = 0; x < songs.length; x++) {\n            playlist.push({song: songs[x], queued: false});\n            if (x == 0 && queued !== undefined) \n                playlist = playlist.concat(queued);\n        }\n        this.setState({songs: playlist});\n    }\n\n    nextShuffledIndex(index) {\n        let song = this.state.shuffled[index];\n        let song_index_songs = this.state.songs.findIndex(s => JSON.stringify(s.song) === JSON.stringify(song.song) && s.queued === song.queued);\n        this.setState({shuffled_index: index, index: song_index_songs });\n    }\n\n    handleNextSong = () => {\n        // WHAT IF WE REACHED THE END OF THE SONGS???\n        let shuffle = this.state.shuffle;\n        let index = shuffle?this.state.shuffled_index:this.state.index;\n        let length = shuffle?this.state.shuffled.length:this.state.songs.length;\n        let songs = shuffle?this.state.shuffled:this.state.songs;\n        let song = this.state.shuffle?this.state.shuffled[index]:this.state.songs[index];\n\n        // this.removeQueueSong(index);\n        if (!song.queued) // We the song that just played is not a queued song, just incr the index of that song to go to the next song\n            index+=1;\n\n        if (song.queued) { // If the song just played is a queued song, remove it from our songs list\n            if (shuffle) { // If the player is playing the shuffled array, we remove the queued song from the shuffled songs list but need to remove it from the nonshuffled songs list\n                let song_index_songs = this.state.songs.findIndex(s => JSON.stringify(s.song) === JSON.stringify(song.song) && s.queued === song.queued);\n                this.state.songs.splice(song_index_songs, 1);\n            }\n            songs.splice(index, 1);\n            length = songs.length; // Update the length of the songs array since a queued song was removed\n        }\n        if (index == length) { // If we have reached the end of our songs list, go back to the beginning of the lsit\n            if (this.state.shuffle) \n                // If we are going back to the first song of the shuffled songs list, we must\n                // update what index that song is in the regular songs list so that when \n                // a user clicks unshuffle the order of songs being played continues from an inorder fashion \n                this.nextShuffledIndex(0);\n            else\n                this.setState({index: 0});\n            return 0;\n        }\n        else {\n            // If shuffle is toggled, incr the shuffle_index and set index to curr song index in songs\n            if (this.state.shuffle) \n                this.nextShuffledIndex(index);\n            else\n                this.setState({index: index}); \n            return 1;\n        }\n        console.log(this.state.shuffled, this.state.songs);\n    }\n\n    handlePrevSong = (played) => {\n         // WHAT IF WE AT THE START OF THE SONGS???\n        console.log(played);\n        let index = this.state.index;\n        if (played > 0.03 || index == 0){\n            this.setState({index: index});\n            return 0;\n        }\n        else {    \n            this.setState({index: index-1});\n            return 1;\n        }\n    }\n\n    getQueuedSongs() {\n        let songs = this.state.songs, queue;;\n        console.log(\"queue:\", songs);\n        queue = songs.filter(song => song.queued);\n        return queue;\n    }\n\n    \n    render() {\n        let user, playing = this.state.playing, songs = this.state.songs, index = this.state.index, \n            shuffled = this.state.shuffled, shuffle = this.state.shuffle,  shuffled_index = this.state.shuffled_index;\n        // console.log(\"songs is\", songs);\n        // console.log(\"main screen says\", this.state.playing);\n        // console.log(user);\n\n        return (\n            <Query pollInterval={500} query={GET_USER} variables={{ userId: this.state.user}}>\n                {({ loading, error, data }) => {\n                    if (loading) return 'Loading...';\n                    if (error) return `Error! ${error.message}`;\n                    else user = data.user;\n                    return (\n                        <div>\n                            <div className=\"row flex-nowrap mr-0\">\n                                <Sidebar user={user} history={this.props.history} playlistCallback={this.goToPlaylist}/>\n                                <div className='col overflow-hidden' style={{paddingBottom: 100}}>\n\n                                    <Switch>\n                                        <Route path=\"/app/playlist/:id\" render={(props) => (<PlaylistScreen {...props} user={user}\n                                            handlePlaylist={this.handlePlayPlaylist} handleSongChange={this.handleSongChange} \n                                            handleQueueSong={this.handleQueueSong} handlePlayPlaylist={this.handlePlayPlaylist} \n                                            />)}\n                                        />\n                                        <Route path=\"/app/album\">\n                                            <AlbumScreen user={user} history={this.props.history}\n                                                handlePlaylist={this.handlePlayPlaylist} handleSongChange={this.handleSongChange} \n                                                handleQueueSong={this.handleQueueSong} handlePlayPlaylist={this.handlePlayPlaylist} />\n                                        </Route>\n                                        <Route path=\"/app/artist\">\n                                            <ArtistScreen user={user} history={this.props.history}/>\n                                        </Route>\n                                        <Route path=\"/app/search\">\n                                            <SearchScreen />\n                                        </Route>\n                                        <Route path=\"/app/profile/:id\" render={(props) => \n                                            user != null ? <ProfileScreen {...props} user={user}/> : <div/>}>\n                                        </Route>\n                                        <Route path=\"/app/home\">\n                                            <HomeScreen handleSongChange={this.handleSongChange} playing={playing} user={user}/>\n                                        </Route>\n                                        <Route path=\"/app/community\">\n                                            <CommunityScreen/>\n                                        </Route>\n                                    </Switch>\n                                </div>\n                            </div>\n                            {this.state.showQueue? <Queue songs={songs} index={index} shuffled={shuffled} \n                                shuffle={shuffle} shuffled_index={shuffled_index} handleCloseQueue={this.handleCloseQueue}/>\n                                :null }\n                            <div className=\"row fixed-bottom\">\n                                <Player songs={songs} playing={playing} index={index} shuffled={shuffled} shuffle={shuffle} shuffled_index={shuffled_index}\n                                    handleNextSong={this.handleNextSong} handlePrevSong={this.handlePrevSong} handleToggleShuffle={this.handleToggleShuffle}\n                                    handleShowQueue={this.handleShowQueue} showQueue={this.state.showQueue} handleCloseQueue={this.handleCloseQueue}/>\n                            </div>\n                        </div>\n                    )\n                }}\n            </Query>\n        )\n    }\n}\n\nexport default MainScreen;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pawan/Desktop/Marvins-Studio/marvin/src/components/playlist_screen/PlaylistSong.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as Icon from 'react-bootstrap-icons';\nimport { Query, Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nconst UPDATE_RECENTLY_PLAYED = gql`\n    mutation updateRecentlyPlayed(\n        $id: String!\n        $recentlyPlayed: [String]!\n    ) {\n        updateRecentlyPlayed(\n            id: $id\n            recentlyPlayed: $recentlyPlayed\n        ) {\n            _id\n        }\n    }\n`;\n\nclass PlaylistSong extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let song = this.props.song;\n    let playlist = this.props.playlist;\n    let loggedIn = this.props.loggedIn,\n        canDelete = loggedIn ? this.props.collaborators.includes(this.props.user.email) || this.props.playlist.ownerID == this.props.user._id : loggedIn;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"songrow row text-light ml-2\",\n        style: {\n          fontWeight: 450,\n          lineHeight: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          id: \"songName\",\n          className: \"col-3 text-playlist text-truncate overflow-hidden overflow-ellipsis\" //onClick={this.props.handleSongChange.bind(this, this.props.song)}\n          ,\n          onClick: () => {\n            this.props.updateRecents(this.props.updateRecentlyPlayed, playlist);\n            this.props.handleSongChange(song);\n          },\n          children: song.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"artistName\",\n          className: \"col-2 text-nowrap text-truncate overflow-hidden overflow-ellipses\",\n          children: song.artistName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"albumName\",\n          className: \"col-2 text-nowrap overflow-hidden overflow-ellipses\",\n          style: {\n            textOverflow: 'ellipsis'\n          },\n          children: song.albumName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"date\",\n          className: \"col-2\",\n          children: song.lastUpdated.slice(0, 10)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Icon.List, {\n          className: \"col-1 qsong btn btn-outline-primary bg-transparent border-0 my-2 \",\n          size: 37,\n          onClick: this.props.handleQueueSong.bind(this, song)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), loggedIn && canDelete ? /*#__PURE__*/_jsxDEV(Icon.TrashFill, {\n          id: \"deleteSong\",\n          className: \"col-1 removesong btn btn-outline-primary bg-transparent border-0  my-2\",\n          size: 37,\n          onClick: e => {\n            e.preventDefault(); // load state and db songs\n\n            let newPlaylistSongs = playlist.songs;\n            let newStateSongs = this.props.stateSongs; // remove song from new state and new db\n\n            let songToDelete = newStateSongs[this.props.index];\n            newStateSongs.splice(this.props.index, 1);\n            let dbIndex = newPlaylistSongs.findIndex(getSong => getSong.videoId === songToDelete.videoId);\n            if (dbIndex !== -1) newPlaylistSongs.splice(dbIndex, 1); // edit db and state\n\n            newPlaylistSongs.forEach(song => {\n              delete song['__typename'];\n            });\n            this.props.updatePlaylistSongs({\n              variables: {\n                id: playlist._id,\n                songs: newPlaylistSongs\n              }\n            });\n            this.props.handleDeleteFromState(this.props.index);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"divider song-divider\",\n        style: {\n          borderColor: '#545454'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PlaylistSong;","map":{"version":3,"sources":["/Users/pawan/Desktop/Marvins-Studio/marvin/src/components/playlist_screen/PlaylistSong.js"],"names":["React","Component","Link","Icon","Query","Mutation","gql","UPDATE_RECENTLY_PLAYED","PlaylistSong","constructor","props","render","song","playlist","loggedIn","canDelete","collaborators","includes","user","email","ownerID","_id","fontWeight","lineHeight","updateRecents","updateRecentlyPlayed","handleSongChange","title","artistName","textOverflow","albumName","lastUpdated","slice","handleQueueSong","bind","e","preventDefault","newPlaylistSongs","songs","newStateSongs","stateSongs","songToDelete","index","splice","dbIndex","findIndex","getSong","videoId","forEach","updatePlaylistSongs","variables","id","handleDeleteFromState","borderColor"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport * as Icon from 'react-bootstrap-icons'\nimport { Query, Mutation } from 'react-apollo'\nimport gql from 'graphql-tag';\n\nconst UPDATE_RECENTLY_PLAYED = gql`\n    mutation updateRecentlyPlayed(\n        $id: String!\n        $recentlyPlayed: [String]!\n    ) {\n        updateRecentlyPlayed(\n            id: $id\n            recentlyPlayed: $recentlyPlayed\n        ) {\n            _id\n        }\n    }\n`\nclass PlaylistSong extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let song = this.props.song;\n        let playlist = this.props.playlist;\n        let loggedIn = this.props.loggedIn, canDelete = loggedIn ? this.props.collaborators.includes(this.props.user.email) || this.props.playlist.ownerID == this.props.user._id : loggedIn;\n        return (\n            <div>\n                <div className=\"songrow row text-light ml-2\" style={{ fontWeight: 450, lineHeight: 3 }}>\n                    <a id=\"songName\" className=\"col-3 text-playlist text-truncate overflow-hidden overflow-ellipsis\"\n                        //onClick={this.props.handleSongChange.bind(this, this.props.song)}\n                        onClick={() => {\n                            this.props.updateRecents(this.props.updateRecentlyPlayed, playlist);\n                            this.props.handleSongChange(song)\n                        }}\n                    >{song.title}</a>\n                    <label id=\"artistName\" className=\"col-2 text-nowrap text-truncate overflow-hidden overflow-ellipses\">\n                        {song.artistName}\n                    </label>\n                    <label id=\"albumName\" className=\"col-2 text-nowrap overflow-hidden overflow-ellipses\" style={{ textOverflow: 'ellipsis' }}>\n                        {song.albumName}\n                    </label>\n                    <label id=\"date\" className=\"col-2\">{song.lastUpdated.slice(0, 10)}</label>\n\n                    <Icon.List className=\"col-1 qsong btn btn-outline-primary bg-transparent border-0 my-2 \" size={37} onClick={this.props.handleQueueSong.bind(this, song)} />\n\n                    {loggedIn && canDelete ?\n                        <Icon.TrashFill id=\"deleteSong\" className='col-1 removesong btn btn-outline-primary bg-transparent border-0  my-2' size={37} onClick={e => {\n                            e.preventDefault();\n                            // load state and db songs\n                            let newPlaylistSongs = playlist.songs;\n                            let newStateSongs = this.props.stateSongs\n\n                            // remove song from new state and new db\n                            let songToDelete = newStateSongs[this.props.index]\n                            newStateSongs.splice(this.props.index, 1);\n                            let dbIndex = newPlaylistSongs.findIndex(getSong => getSong.videoId === songToDelete.videoId)\n                            if (dbIndex !== -1)\n                                newPlaylistSongs.splice(dbIndex, 1)\n\n                            // edit db and state\n                            newPlaylistSongs.forEach(song => {\n                                delete song['__typename']\n                            })\n                            this.props.updatePlaylistSongs({\n                                variables: {\n                                    id: playlist._id,\n                                    songs: newPlaylistSongs\n                                }\n                            })\n                            this.props.handleDeleteFromState(this.props.index)\n                        }} />\n\n\n                        : null}\n\n                </div>\n                <div className=\"divider song-divider\" style={{ borderColor: '#545454' }} />\n            </div>\n\n        )\n    }\n}\n\nexport default PlaylistSong;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pawan/Desktop/Marvins-Studio/marvin/src/components/modals/DeletePlaylistModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport gql from 'graphql-tag';\nimport { Mutation, useMutation, useQuery } from 'react-apollo';\n/*\n    QUERY AND MUTATION TO REMOVE PL FROM COLLABORATORS\n*/\n\nconst GET_USERS = gql`\n    query users {\n        users {\n            email\n            collaborativePlaylistsID\n        }\n    }\n`;\nconst UPDATE_COLLABORATIVE_PLAYLISTS = gql`\n    mutation updateCollaborativePlaylists(\n        $email: String!\n        $collaborativePlaylistsID: [String]!\n    ) {\n        updateCollaborativePlaylists(\n            email: $email\n            collaborativePlaylistsID: $collaborativePlaylistsID\n        ) {\n            email\n        }\n    }\n`;\n/*\n    QUERY AND MUTATION TO UPDATE PUBLIC PLAYLISTS\n*/\n\nconst UPDATE_PUBLIC_PLAYLISTS = gql`\n    mutation updatePublicPlaylists(\n        $id: String!\n        $publicPlaylistsID: [String]!\n    ) {\n        updatePublicPlaylists (\n            id: $id\n            publicPlaylistsID: $publicPlaylistsID\n        ) {\n            _id\n        }\n    }\n`;\nconst GET_COMMUNITY = gql`\n    query community($id: String!) {\n        community(id: $id) {\n            publicPlaylistsID\n        }\n    }\n`;\n/*\n    MUTATIONS TO REMOVE PLAYLIST FROM PLAYLISTS AND USER\n*/\n\nconst REMOVE_PLAYLIST = gql`\nmutation removePlaylist($playlistID: String!) {\n    removePlaylist(id: $playlistID) {\n        _id\n    }\n}\n`;\nconst UPDATE_PLAYLIST_IDS = gql`\nmutation updatePlaylistIDs (\n    $id: String!\n    $ownedPlaylistsID: [String]!\n    $collaborativePlaylistsID: [String]!\n    $followedPlaylistsID: [String]!\n) {\n    updatePlaylistIDs (\n        id: $id\n        ownedPlaylistsID: $ownedPlaylistsID\n        collaborativePlaylistsID: $collaborativePlaylistsID\n        followedPlaylistsID: $followedPlaylistsID\n    ) {\n        _id\n    }\n}\n`;\n\nfunction DeletePlaylistModal(props) {\n  _s();\n\n  const {\n    data: usersData\n  } = useQuery(GET_USERS);\n  const {\n    data: communityData\n  } = useQuery(GET_COMMUNITY, {\n    variables: {\n      id: \"5fc69c8b61fdeb5194781f2f\"\n    }\n  });\n  const [removePlaylist] = useMutation(REMOVE_PLAYLIST);\n  const [updatePlaylistIDs] = useMutation(UPDATE_PLAYLIST_IDS);\n  const [updatePublicPlaylists] = useMutation(UPDATE_PUBLIC_PLAYLISTS);\n  const [updateCollaborativePlaylists] = useMutation(UPDATE_COLLABORATIVE_PLAYLISTS);\n  let user = props.user;\n  let playlist = props.playlist;\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    id: \"deletePlaylist\",\n    show: props.show,\n    onHide: props.handleClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        className: \"\",\n        children: \"Delete Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      id: \"exportModalBody\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault(); // remove playlists from collaborators' set\n\n          playlist.collaborators.forEach(currCollaborator => {\n            let delCollaborator = usersData.users.find(currUser => currUser.email == currCollaborator);\n            let newCollabPL = [...delCollaborator.collaborativePlaylistsID];\n            let collabIndex = newCollabPL.findIndex(playlistID => playlistID == props.playlist._id);\n\n            if (collabIndex != -1) {\n              newCollabPL.splice(collabIndex, 1);\n              updateCollaborativePlaylists({\n                variables: {\n                  email: delCollaborator.email,\n                  collaborativePlaylistsID: newCollabPL\n                }\n              });\n            }\n          }); // remove playlist from public playlists\n\n          let pubPLIndex = communityData.community.publicPlaylistsID.findIndex(playlistID => playlistID == props.playlist._id);\n\n          if (pubPLIndex != -1) {\n            communityData.community.publicPlaylistsID.splice(pubPLIndex, 1);\n            updatePublicPlaylists({\n              variables: {\n                id: \"5fc69c8b61fdeb5194781f2f\",\n                publicPlaylistsID: communityData.community.publicPlaylistsID\n              }\n            });\n          } // remove playlist from playlists and user's set\n\n\n          let index = user.ownedPlaylistsID.indexOf(playlist._id);\n\n          if (index > -1) {\n            user.ownedPlaylistsID.splice(index, 1);\n            removePlaylist({\n              variables: {\n                playlistID: playlist._id\n              }\n            });\n            updatePlaylistIDs({\n              variables: {\n                id: user._id,\n                ownedPlaylistsID: user.ownedPlaylistsID,\n                collaborativePlaylistsID: user.collaborativePlaylistsID,\n                followedPlaylistsID: user.followedPlaylistsID\n              }\n            }).then(props.history.push('/app/home'));\n          } else throw new Error('Playlist not owned');\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group col-9 text-center mx-auto\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"mt-2 mb-3 \",\n            children: \"Are you sure you want to delete playlist?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"mt-2 mb-3\",\n            children: \"You will not be able to retrieve it once it is deleted.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mb-4\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              className: \"col-6 btn btn-danger ml-2 text-center mx-auto\",\n              onClick: props.handleClose,\n              children: \"Delete Playlist\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DeletePlaylistModal, \"7VCHJiOv4e1t2aM2M/v9I7HXoAk=\", false, function () {\n  return [useQuery, useQuery, useMutation, useMutation, useMutation, useMutation];\n});\n\n_c = DeletePlaylistModal;\nexport default DeletePlaylistModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeletePlaylistModal\");","map":{"version":3,"sources":["/Users/pawan/Desktop/Marvins-Studio/marvin/src/components/modals/DeletePlaylistModal.js"],"names":["React","Component","Modal","Button","gql","Mutation","useMutation","useQuery","GET_USERS","UPDATE_COLLABORATIVE_PLAYLISTS","UPDATE_PUBLIC_PLAYLISTS","GET_COMMUNITY","REMOVE_PLAYLIST","UPDATE_PLAYLIST_IDS","DeletePlaylistModal","props","data","usersData","communityData","variables","id","removePlaylist","updatePlaylistIDs","updatePublicPlaylists","updateCollaborativePlaylists","user","playlist","show","handleClose","e","preventDefault","collaborators","forEach","currCollaborator","delCollaborator","users","find","currUser","email","newCollabPL","collaborativePlaylistsID","collabIndex","findIndex","playlistID","_id","splice","pubPLIndex","community","publicPlaylistsID","index","ownedPlaylistsID","indexOf","followedPlaylistsID","then","history","push","Error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Modal, Button} from 'react-bootstrap'\nimport gql from 'graphql-tag';\nimport { Mutation, useMutation, useQuery } from 'react-apollo'\n\n/*\n    QUERY AND MUTATION TO REMOVE PL FROM COLLABORATORS\n*/\nconst GET_USERS = gql`\n    query users {\n        users {\n            email\n            collaborativePlaylistsID\n        }\n    }\n`\n\nconst UPDATE_COLLABORATIVE_PLAYLISTS = gql`\n    mutation updateCollaborativePlaylists(\n        $email: String!\n        $collaborativePlaylistsID: [String]!\n    ) {\n        updateCollaborativePlaylists(\n            email: $email\n            collaborativePlaylistsID: $collaborativePlaylistsID\n        ) {\n            email\n        }\n    }\n`\n\n/*\n    QUERY AND MUTATION TO UPDATE PUBLIC PLAYLISTS\n*/\n\nconst UPDATE_PUBLIC_PLAYLISTS = gql`\n    mutation updatePublicPlaylists(\n        $id: String!\n        $publicPlaylistsID: [String]!\n    ) {\n        updatePublicPlaylists (\n            id: $id\n            publicPlaylistsID: $publicPlaylistsID\n        ) {\n            _id\n        }\n    }\n`\n\nconst GET_COMMUNITY = gql`\n    query community($id: String!) {\n        community(id: $id) {\n            publicPlaylistsID\n        }\n    }\n`\n\n/*\n    MUTATIONS TO REMOVE PLAYLIST FROM PLAYLISTS AND USER\n*/\nconst REMOVE_PLAYLIST = gql `\nmutation removePlaylist($playlistID: String!) {\n    removePlaylist(id: $playlistID) {\n        _id\n    }\n}\n`;\n\nconst UPDATE_PLAYLIST_IDS = gql`\nmutation updatePlaylistIDs (\n    $id: String!\n    $ownedPlaylistsID: [String]!\n    $collaborativePlaylistsID: [String]!\n    $followedPlaylistsID: [String]!\n) {\n    updatePlaylistIDs (\n        id: $id\n        ownedPlaylistsID: $ownedPlaylistsID\n        collaborativePlaylistsID: $collaborativePlaylistsID\n        followedPlaylistsID: $followedPlaylistsID\n    ) {\n        _id\n    }\n}\n`\n\nfunction DeletePlaylistModal (props) {\n    const {data: usersData} = useQuery(GET_USERS)\n    const {data: communityData} = useQuery(GET_COMMUNITY, {variables: {id: \"5fc69c8b61fdeb5194781f2f\"}})\n    \n    const [removePlaylist] = useMutation(REMOVE_PLAYLIST)\n    const [updatePlaylistIDs] = useMutation(UPDATE_PLAYLIST_IDS)\n    const [updatePublicPlaylists] = useMutation(UPDATE_PUBLIC_PLAYLISTS)\n    const [updateCollaborativePlaylists] = useMutation(UPDATE_COLLABORATIVE_PLAYLISTS)\n    \n    let user = props.user;\n    let playlist = props.playlist;\n    return (\n        <Modal id=\"deletePlaylist\" show={props.show} onHide={props.handleClose}>\n            <Modal.Header closeButton={true}>\n                <Modal.Title className=\"\">Delete Playlist</Modal.Title>\n            </Modal.Header>\n            <Modal.Body id=\"exportModalBody\">\n                <form onSubmit={e => {\n                    e.preventDefault();\n                    // remove playlists from collaborators' set\n                    playlist.collaborators.forEach(currCollaborator => {\n                        let delCollaborator = usersData.users.find(currUser => currUser.email == currCollaborator)\n                        let newCollabPL = [...delCollaborator.collaborativePlaylistsID]\n                        let collabIndex = newCollabPL.findIndex(playlistID => playlistID == props.playlist._id)\n                        if (collabIndex != -1) {\n                            newCollabPL.splice(collabIndex, 1)\n                            updateCollaborativePlaylists({ variables: {\n                                email: delCollaborator.email,\n                                collaborativePlaylistsID: newCollabPL\n                            }})\n                        }\n                    })\n\n                    // remove playlist from public playlists\n                    let pubPLIndex = communityData.community.publicPlaylistsID.findIndex(playlistID => playlistID == props.playlist._id)\n                    if (pubPLIndex != -1) {\n                        communityData.community.publicPlaylistsID.splice(pubPLIndex, 1)\n                        updatePublicPlaylists({ variables: {\n                            id: \"5fc69c8b61fdeb5194781f2f\",\n                            publicPlaylistsID: communityData.community.publicPlaylistsID\n                        }})\n                    }\n\n                    // remove playlist from playlists and user's set\n                    let index = user.ownedPlaylistsID.indexOf(playlist._id);\n                    if (index > -1) {\n                        user.ownedPlaylistsID.splice(index, 1);\n                        removePlaylist({ variables: { playlistID: playlist._id }})\n                        updatePlaylistIDs({ variables: {\n                            id: user._id,\n                            ownedPlaylistsID: user.ownedPlaylistsID,\n                            collaborativePlaylistsID: user.collaborativePlaylistsID,\n                            followedPlaylistsID: user.followedPlaylistsID\n                        }}).then(props.history.push('/app/home'))\n                    }\n                    else throw new Error('Playlist not owned')\n                }}>\n                    <div className=\"form-group col-9 text-center mx-auto\">\n                        <label className=\"mt-2 mb-3 \">Are you sure you want to delete playlist?</label>\n                        <label className=\"mt-2 mb-3\">You will not be able to retrieve it once it is deleted.</label>\n                        <div className=\"row mb-4\">\n                            <Button type=\"submit\" className=\"col-6 btn btn-danger ml-2 text-center mx-auto\" onClick={props.handleClose}>Delete Playlist</Button>\n                        </div>\n                    </div>\n                </form>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default DeletePlaylistModal;"]},"metadata":{},"sourceType":"module"}
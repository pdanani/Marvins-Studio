{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pawan/Desktop/Marvins-Studio/marvin/src/components/modals/AddSongModal.js\";\nimport React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport gql from 'graphql-tag';\nimport { Mutation, Query } from 'react-apollo';\nconst UPDATE_PLAYLIST_SONGS = gql`\n    mutation updatePlaylistSongs(\n        $id: String!\n        $songs: [SongInput]!\n    ) {\n        updatePlaylistSongs(\n            id: $id\n            songs: $songs\n        ) {\n            _id\n        }\n    }\n`;\nconst GET_PLAYLIST = gql`\n    query playlist($playlistID: String) {\n        playlist(id: $playlistID) {\n            _id\n            title\n            songs {\n                title\n                videoId\n                artistID\n                artistName\n                albumName\n                genre\n                albumArt\n            }\n        }\n    }\n`;\n\nclass AddSongModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.addSong = (playlist, flag) => {\n      let songs = playlist.songs;\n      let artistID = this.props.album.artist[0].browseId;\n\n      if (!flag) {\n        let song = this.props.song;\n        let songToAdd = {\n          videoId: song.videoId,\n          title: song.name,\n          artistID: artistID,\n          albumID: this.props.albumId,\n          // Prop the album id when going to that page from search screen\n          artistName: this.props.album.artist[0].name,\n          albumName: this.props.album.title,\n          albumArt: this.props.album.thumbnails[3].url,\n          genre: null\n        };\n        songs.push(songToAdd);\n      } else {\n        let album = this.props.album;\n        album.tracks.forEach(song => {\n          try {\n            let songToAdd = {\n              videoId: song.videoId,\n              title: song.name,\n              artistID: artistID,\n              albumID: this.props.albumId,\n              artistName: this.props.album.artist[0].name,\n              albumName: this.props.album.title,\n              albumArt: this.props.album.thumbnails[3] ? this.props.album.thumbnails[3].url : \"https://www.wmhbradio.org/wp-content/uploads/2016/07/music-placeholder.png\",\n              genre: null,\n              lastUpdated: song.lastUpdated\n            };\n            songs.push(songToAdd);\n          } catch (e) {\n            console.log(e);\n          }\n        });\n      }\n\n      this.setState({\n        songs: songs,\n        id: playlist._id\n      });\n      console.log(this.state);\n      this.props.handleClose();\n    };\n  }\n\n  render() {\n    let ownedIDs = this.props.user.ownedPlaylistsID;\n    let collabIDs = this.props.user.collaborativePlaylistsID;\n    return /*#__PURE__*/_jsxDEV(Mutation, {\n      mutation: UPDATE_PLAYLIST_SONGS,\n      onCompleted: () => this.props.history.push('/app/album'),\n      children: (updatePlaylistSongs, {\n        loading,\n        error\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Modal, {\n          id: \"addSongModal\",\n          show: this.props.show,\n          onHide: this.props.handleClose,\n          children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n            closeButton: true,\n            children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n              children: \"Choose which playlist to add to\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n            id: \"addSongModalBody\",\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: e => {\n                e.preventDefault();\n                let newSongs = this.state.songs;\n                newSongs.forEach(song => {\n                  delete song['__typename'];\n                });\n                updatePlaylistSongs({\n                  variables: {\n                    id: this.state.id,\n                    songs: newSongs\n                  }\n                });\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group col-8 text-center mx-auto\",\n                children: [ownedIDs.map((id, index) => /*#__PURE__*/_jsxDEV(Query, {\n                  pollInterval: 500,\n                  query: GET_PLAYLIST,\n                  variables: {\n                    playlistID: id\n                  },\n                  children: ({\n                    loading,\n                    error,\n                    data\n                  }) => {\n                    let playlist;\n                    if (loading) return 'Loading...';\n                    if (error) return `Error! ${error.message}`;else playlist = data.playlist;\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"btn default\",\n                        type: \"submit\",\n                        onClick: () => this.addSong(playlist, this.props.flag),\n                        children: playlist.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 120,\n                        columnNumber: 57\n                      }, this)\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 53\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 41\n                }, this)), collabIDs.map((id, index) => /*#__PURE__*/_jsxDEV(Query, {\n                  pollInterval: 500,\n                  query: GET_PLAYLIST,\n                  variables: {\n                    playlistID: id\n                  },\n                  children: ({\n                    loading,\n                    error,\n                    data\n                  }) => {\n                    let playlist;\n                    if (loading) return 'Loading...';\n                    if (error) return `Error! ${error.message}`;else playlist = data.playlist;\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"btn default\",\n                        type: \"submit\",\n                        onClick: () => this.addSong(playlist, this.props.flag),\n                        children: playlist.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 135,\n                        columnNumber: 57\n                      }, this)\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 134,\n                      columnNumber: 53\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 41\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 41\n            }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Errors :( Please try again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, this.props.user._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AddSongModal;","map":{"version":3,"sources":["/Users/pawan/Desktop/Marvins-Studio/marvin/src/components/modals/AddSongModal.js"],"names":["React","Component","Modal","gql","Mutation","Query","UPDATE_PLAYLIST_SONGS","GET_PLAYLIST","AddSongModal","state","addSong","playlist","flag","songs","artistID","props","album","artist","browseId","song","songToAdd","videoId","title","name","albumID","albumId","artistName","albumName","albumArt","thumbnails","url","genre","push","tracks","forEach","lastUpdated","e","console","log","setState","id","_id","handleClose","render","ownedIDs","user","ownedPlaylistsID","collabIDs","collaborativePlaylistsID","history","updatePlaylistSongs","loading","error","show","preventDefault","newSongs","variables","map","index","playlistID","data","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Modal} from 'react-bootstrap'\nimport gql from 'graphql-tag';\nimport { Mutation, Query } from 'react-apollo'\n\nconst UPDATE_PLAYLIST_SONGS = gql`\n    mutation updatePlaylistSongs(\n        $id: String!\n        $songs: [SongInput]!\n    ) {\n        updatePlaylistSongs(\n            id: $id\n            songs: $songs\n        ) {\n            _id\n        }\n    }\n`\n\nconst GET_PLAYLIST = gql `\n    query playlist($playlistID: String) {\n        playlist(id: $playlistID) {\n            _id\n            title\n            songs {\n                title\n                videoId\n                artistID\n                artistName\n                albumName\n                genre\n                albumArt\n            }\n        }\n    }\n`\n\nclass AddSongModal extends Component {\n    state = {\n\n    }\n\n    addSong = (playlist, flag) => {\n        let songs = playlist.songs;\n        let artistID = this.props.album.artist[0].browseId;\n        if (!flag) {\n            let song = this.props.song;\n            let songToAdd = {\n                videoId: song.videoId,\n                title: song.name,\n                artistID: artistID,\n                albumID: this.props.albumId, // Prop the album id when going to that page from search screen\n                artistName: this.props.album.artist[0].name,\n                albumName: this.props.album.title,\n                albumArt: this.props.album.thumbnails[3].url,\n                genre: null,\n            }\n            songs.push(songToAdd);\n        }\n        else {\n            let album = this.props.album;\n            album.tracks.forEach(song => {\n                try {\n                    let songToAdd= {\n                        videoId: song.videoId,\n                        title: song.name,\n                        artistID: artistID,\n                        albumID: this.props.albumId,\n                        artistName: this.props.album.artist[0].name,\n                        albumName: this.props.album.title,\n                        albumArt: (this.props.album.thumbnails[3]) ? this.props.album.thumbnails[3].url : \"https://www.wmhbradio.org/wp-content/uploads/2016/07/music-placeholder.png\",\n                        genre: null,\n                        lastUpdated: song.lastUpdated\n                    }\n                    songs.push(songToAdd);\n                }\n                catch (e) { console.log(e) }\n            })\n        }\n        this.setState({\n            songs: songs,\n            id: playlist._id\n        })\n        console.log(this.state);\n        this.props.handleClose();\n    }\n    render() {\n        let ownedIDs = this.props.user.ownedPlaylistsID;\n        let collabIDs = this.props.user.collaborativePlaylistsID;\n        return (\n            <Mutation mutation={UPDATE_PLAYLIST_SONGS} key={this.props.user._id} onCompleted={() => this.props.history.push('/app/album')}>\n            {(updatePlaylistSongs, { loading, error}) => (\n                <div className=\"container\">\n                    <Modal id=\"addSongModal\" show={this.props.show} onHide={this.props.handleClose}>\n                        <Modal.Header closeButton={true}>\n                            <Modal.Title>Choose which playlist to add to</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body id=\"addSongModalBody\">\n                            <form onSubmit={e => {\n                                e.preventDefault();\n                                let newSongs = this.state.songs;\n                                newSongs.forEach(song => {\n                                    delete song['__typename']\n                                })\n                                updatePlaylistSongs({ variables: {\n                                    id: this.state.id,\n                                    songs: newSongs\n                                }})\n                            }}>\n                                <div className=\"form-group col-8 text-center mx-auto\">\n                                    {ownedIDs.map((id, index) => (\n                                        <Query pollInterval={500} query={GET_PLAYLIST} variables={{ playlistID: id }}>\n                                            {({ loading, error, data }) => {\n                                                let playlist;\n                                                if(loading) return 'Loading...';\n                                                if(error) return `Error! ${error.message}`;\n                                                else playlist = data.playlist;\n                                                return(\n                                                    <div key={index}>\n                                                        <button className=\"btn default\" type=\"submit\" onClick={() => this.addSong(playlist, this.props.flag)}>{playlist.title}</button>\n                                                    </div>\n                                                )\n                                            }}\n                                        </Query>\n                                    ))}\n                                    {collabIDs.map((id, index) => (\n                                        <Query pollInterval={500} query={GET_PLAYLIST} variables={{ playlistID: id }}>\n                                            {({ loading, error, data }) => {\n                                                let playlist;\n                                                if(loading) return 'Loading...';\n                                                if(error) return `Error! ${error.message}`;\n                                                else playlist = data.playlist;\n                                                return (\n                                                    <div key={index}>\n                                                        <button className='btn default' type='submit' onClick={() => this.addSong(playlist, this.props.flag)}>{playlist.title}</button>\n                                                    </div>\n                                                )\n                                            }}\n                                        </Query>\n                                    ))}\n                                </div>\n                            </form>\n                            {loading && <p>Loading...</p>}\n                            {error && <p>Errors :( Please try again</p>}\n                        </Modal.Body>\n                    </Modal>\n                </div>\n            )}\n            </Mutation>\n        )\n    }\n}\n\nexport default AddSongModal;"]},"metadata":{},"sourceType":"module"}
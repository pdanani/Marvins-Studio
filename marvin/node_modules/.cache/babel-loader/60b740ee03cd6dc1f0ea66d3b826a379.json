{"ast":null,"code":"/*!\n * array-sort <https://github.com/jonschlinkert/array-sort>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nvar defaultCompare = require('default-compare');\n\nvar typeOf = require('kind-of');\n\nvar get = require('get-value');\n/**\n * Sort an array of objects by one or more properties.\n *\n * @param  {Array} `arr` The Array to sort.\n * @param  {String|Array|Function} `props` One or more object paths or comparison functions.\n * @param  {Object} `opts` Pass `{ reverse: true }` to reverse the sort order.\n * @return {Array} Returns a sorted array.\n * @api public\n */\n\n\nfunction arraySort(arr, props, opts) {\n  if (arr == null) {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    throw new TypeError('array-sort expects an array.');\n  }\n\n  if (arguments.length === 1) {\n    return arr.sort();\n  }\n\n  var args = flatten([].slice.call(arguments, 1)); // if the last argument appears to be a plain object,\n  // it's not a valid `compare` arg, so it must be options.\n\n  if (typeOf(args[args.length - 1]) === 'object') {\n    opts = args.pop();\n  }\n\n  return arr.sort(sortBy(args, opts));\n}\n/**\n * Iterate over each comparison property or function until `1` or `-1`\n * is returned.\n *\n * @param  {String|Array|Function} `props` One or more object paths or comparison functions.\n * @param  {Object} `opts` Pass `{ reverse: true }` to reverse the sort order.\n * @return {Array}\n */\n\n\nfunction sortBy(props, opts) {\n  opts = opts || {};\n  return function compareFn(a, b) {\n    var len = props.length,\n        i = -1;\n    var result;\n\n    while (++i < len) {\n      result = compare(props[i], a, b);\n\n      if (result !== 0) {\n        break;\n      }\n    }\n\n    if (opts.reverse === true) {\n      return result * -1;\n    }\n\n    return result;\n  };\n}\n/**\n * Compare `a` to `b`. If an object `prop` is passed, then\n * `a[prop]` is compared to `b[prop]`\n */\n\n\nfunction compare(prop, a, b) {\n  if (typeof prop === 'function') {\n    // expose `compare` to custom function\n    return prop(a, b, compare.bind(null, null));\n  } // compare object values\n\n\n  if (prop && typeof a === 'object' && typeof b === 'object') {\n    return compare(null, get(a, prop), get(b, prop));\n  }\n\n  return defaultCompare(a, b);\n}\n/**\n * Flatten the given array.\n */\n\n\nfunction flatten(arr) {\n  return [].concat.apply([], arr);\n}\n/**\n * Expose `arraySort`\n */\n\n\nmodule.exports = arraySort;","map":{"version":3,"sources":["/Users/pawan/Desktop/Marvins-Studio/marvin/node_modules/array-sort/index.js"],"names":["defaultCompare","require","typeOf","get","arraySort","arr","props","opts","Array","isArray","TypeError","arguments","length","sort","args","flatten","slice","call","pop","sortBy","compareFn","a","b","len","i","result","compare","reverse","prop","bind","concat","apply","module","exports"],"mappings":"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","sourcesContent":["/*!\n * array-sort <https://github.com/jonschlinkert/array-sort>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar defaultCompare = require('default-compare');\nvar typeOf = require('kind-of');\nvar get = require('get-value');\n\n/**\n * Sort an array of objects by one or more properties.\n *\n * @param  {Array} `arr` The Array to sort.\n * @param  {String|Array|Function} `props` One or more object paths or comparison functions.\n * @param  {Object} `opts` Pass `{ reverse: true }` to reverse the sort order.\n * @return {Array} Returns a sorted array.\n * @api public\n */\n\nfunction arraySort(arr, props, opts) {\n  if (arr == null) {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    throw new TypeError('array-sort expects an array.');\n  }\n\n  if (arguments.length === 1) {\n    return arr.sort();\n  }\n\n  var args = flatten([].slice.call(arguments, 1));\n\n  // if the last argument appears to be a plain object,\n  // it's not a valid `compare` arg, so it must be options.\n  if (typeOf(args[args.length - 1]) === 'object') {\n    opts = args.pop();\n  }\n  return arr.sort(sortBy(args, opts));\n}\n\n/**\n * Iterate over each comparison property or function until `1` or `-1`\n * is returned.\n *\n * @param  {String|Array|Function} `props` One or more object paths or comparison functions.\n * @param  {Object} `opts` Pass `{ reverse: true }` to reverse the sort order.\n * @return {Array}\n */\n\nfunction sortBy(props, opts) {\n  opts = opts || {};\n\n  return function compareFn(a, b) {\n    var len = props.length, i = -1;\n    var result;\n\n    while (++i < len) {\n      result = compare(props[i], a, b);\n      if (result !== 0) {\n        break;\n      }\n    }\n    if (opts.reverse === true) {\n      return result * -1;\n    }\n    return result;\n  };\n}\n\n/**\n * Compare `a` to `b`. If an object `prop` is passed, then\n * `a[prop]` is compared to `b[prop]`\n */\n\nfunction compare(prop, a, b) {\n  if (typeof prop === 'function') {\n    // expose `compare` to custom function\n    return prop(a, b, compare.bind(null, null));\n  }\n  // compare object values\n  if (prop && typeof a === 'object' && typeof b === 'object') {\n    return compare(null, get(a, prop), get(b, prop));\n  }\n  return defaultCompare(a, b);\n}\n\n/**\n * Flatten the given array.\n */\n\nfunction flatten(arr) {\n  return [].concat.apply([], arr);\n}\n\n/**\n * Expose `arraySort`\n */\n\nmodule.exports = arraySort;\n"]},"metadata":{},"sourceType":"script"}